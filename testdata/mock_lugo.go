// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/makeitplay/client-player-go/lugo (interfaces: FootballServer,Football_JoinATeamClient)

// Package testdata is a generated GoMock package.
package testdata

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	lugo "github.com/makeitplay/client-player-go/lugo"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockFootballServer is a mock of FootballServer interface
type MockFootballServer struct {
	ctrl     *gomock.Controller
	recorder *MockFootballServerMockRecorder
}

// MockFootballServerMockRecorder is the mock recorder for MockFootballServer
type MockFootballServerMockRecorder struct {
	mock *MockFootballServer
}

// NewMockFootballServer creates a new mock instance
func NewMockFootballServer(ctrl *gomock.Controller) *MockFootballServer {
	mock := &MockFootballServer{ctrl: ctrl}
	mock.recorder = &MockFootballServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFootballServer) EXPECT() *MockFootballServerMockRecorder {
	return m.recorder
}

// JoinATeam mocks base method
func (m *MockFootballServer) JoinATeam(arg0 *lugo.JoinRequest, arg1 lugo.Football_JoinATeamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinATeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinATeam indicates an expected call of JoinATeam
func (mr *MockFootballServerMockRecorder) JoinATeam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinATeam", reflect.TypeOf((*MockFootballServer)(nil).JoinATeam), arg0, arg1)
}

// SendOrders mocks base method
func (m *MockFootballServer) SendOrders(arg0 context.Context, arg1 *lugo.OrderSet) (*lugo.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrders", arg0, arg1)
	ret0, _ := ret[0].(*lugo.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOrders indicates an expected call of SendOrders
func (mr *MockFootballServerMockRecorder) SendOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrders", reflect.TypeOf((*MockFootballServer)(nil).SendOrders), arg0, arg1)
}

// MockFootball_JoinATeamClient is a mock of Football_JoinATeamClient interface
type MockFootball_JoinATeamClient struct {
	ctrl     *gomock.Controller
	recorder *MockFootball_JoinATeamClientMockRecorder
}

// MockFootball_JoinATeamClientMockRecorder is the mock recorder for MockFootball_JoinATeamClient
type MockFootball_JoinATeamClientMockRecorder struct {
	mock *MockFootball_JoinATeamClient
}

// NewMockFootball_JoinATeamClient creates a new mock instance
func NewMockFootball_JoinATeamClient(ctrl *gomock.Controller) *MockFootball_JoinATeamClient {
	mock := &MockFootball_JoinATeamClient{ctrl: ctrl}
	mock.recorder = &MockFootball_JoinATeamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFootball_JoinATeamClient) EXPECT() *MockFootball_JoinATeamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockFootball_JoinATeamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockFootball_JoinATeamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFootball_JoinATeamClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockFootball_JoinATeamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockFootball_JoinATeamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFootball_JoinATeamClient)(nil).Context))
}

// Header mocks base method
func (m *MockFootball_JoinATeamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockFootball_JoinATeamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFootball_JoinATeamClient)(nil).Header))
}

// Recv mocks base method
func (m *MockFootball_JoinATeamClient) Recv() (*lugo.GameSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*lugo.GameSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockFootball_JoinATeamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFootball_JoinATeamClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockFootball_JoinATeamClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockFootball_JoinATeamClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFootball_JoinATeamClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockFootball_JoinATeamClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockFootball_JoinATeamClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFootball_JoinATeamClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockFootball_JoinATeamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockFootball_JoinATeamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFootball_JoinATeamClient)(nil).Trailer))
}
